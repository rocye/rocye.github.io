<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[02、Eureka - 服务的注册与发现]]></title>
    <url>%2F2018%2F06%2F19%2FSpringCloud-002%2F</url>
    <content type="text"><![CDATA[相关框架版本 Spring Cloud Version：Finchley.RELEASE Sping Boot Version：2.0.3.RELEASE 创建Eureka服务器 (eureka server)1. 创建一个Maven主工程 (1) Step：这里不勾选“Create from archetype” (2) Step：自定义GroupId和ArtifactId (3) Step：自定义工程名及路径 (4) Step：创建完成后如下图，因为是空的父工程所以可以将src文件夹删除 2. 在父工程的基础上创建一个Module子工程用作Eureka服务器 (1) Step：在父工程上右键选择 New-&gt;Module (2) Step：选择Spring Initializr (3) Step：自定义项目Metadata (4) Step：这里只需要选择Eureka服务端依赖 (5) Setp：自定义模块名及路径 (6) Setp：创建完成后的pom文件如下图 3. 修改工程配置文件类型为YML并加入配置 (1) Step：修改application.properties为application.yml（注：本工程配置文件将全部采用YML格式） (2) Step：在配置文件中加入如下配置，其中将registerWithEureka和fetchRegistry设置为false标识此为服务端 1234567891011server: port: 8761eureka: instance: hostname: localhost client: register-with-eureka: false fetch-registry: false service-url: defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ 4. 在启动类上加入注解@EnableEurekaServer 启动itest-server工程，在浏览器中打开：http://localhost:8761 看到下图所示页面表示Eureka服务端已创建成功 创建Eureka客户端 (eureka client)1. 在父工程的基础上创建一个Module子工程用作Eureka客户端 (1) Step：在父工程上右键选择 New-&gt;Module (2) Step：选择Spring Initializr (3) Step：自定义项目Metadata (4) Step：这里选择Eureka Discovery和Web依赖 (5) Setp：自定义模块名及路径 (6) Setp：创建完成后的pom文件如下图 2. 修改工程配置文件类型为YML并加入配置 修改application.properties为application.yml并在配置文件中加入如下配置，其中service-url(或serviceUrl)配置成服务端地址 1234567891011server: port: 8762spring: application: name: itest-clienteureka: client: service-url: defaultZone: http://localhost:8761/eureka/ 3. 在启动类上加入注解@EnableEurekaClient 4. 依次启动itest-server和itest-client工程，打开：http://localhost:8761 看到下图所示页面表示Eureka客户端已创建成功 5. 创建测试的RestController(上面加入的Web依赖在这里用到) 6. 重启itest-client工程，在浏览器中打开：http://localhost:8762/test?name=rocye 看到下图所示页面 源码下载：https://github.com/rocye/SpringCloudStudy 总结基于IntelliJ IDEA开发工具构建Spring Cloud工程非常简单和方便，合理利用配置步骤中的选择来生成配置文件能减少不必要的错误。 PS：本人博客新人，不喜勿喷，谢谢!! 参考文章：https://springcloud.cc/spring-cloud-dalston.html#spring-cloud-eureka-serverhttps://springcloud.cc/spring-cloud-dalston.html#_service_discovery_eureka_clientshttps://blog.csdn.net/forezp/article/details/69696915]]></content>
      <categories>
        <category>SpringCloud笔记</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01、从微服务框架到SpringCloud]]></title>
    <url>%2F2018%2F06%2F19%2FSpringCloud-001%2F</url>
    <content type="text"><![CDATA[什么是微服务框架对于微服务基础框架可以看作是微服务治理架构的核心内容，包括了对微服务模块的全生命周期管理能力，这个能力包括了微服务网关APP，DevOps，Docker和云集成，安全，负载均衡，服务注册和发现等诸多能力。微服务基础框架确实不是简单的微服务网关，而是对整个微服务基础环境的支撑和管控。 Netflix的微服务框架Netflix是一家成功实践微服务架构的互联网公司，几年前，Netflix把几乎整个微服务框架栈开源贡献给了社区，这些框架和组件包括： Eureka：服务注册发现框架 Zuul：服务网关 Karyon：服务端框架 Ribbon：客户端框架 Hystrix：服务容错组件 Archaius：服务配置组件 Servo：Metrics组件 Blitz4j：日志组件 下图展示了基于这些组件构建的一个微服务框架体系： Netflix的开源框架组件已经在Netflix的大规模分布式微服务环境中经过多年的生产实战验证，正逐步被社区接受为构造微服务框架的标准组件。Pivotal去年推出的Spring Cloud开源产品，主要是基于对Netflix开源组件的进一步封装，方便Spring开发人员构建微服务基础框架。 Spring CloudSpring Cloud正是对Netflix的多个开源组件进一步的封装而成，同时又实现了和云端平台及Spring Boot开发框架很好的集成。Spring Cloud 为开发者提供了在分布式系统（配置管理，服务发现，熔断，路由，微代理，控制总线，一次性token，全局锁，leader选举，分布式session，集群状态等等）中快速构建的工具，使用Spring Cloud的开发者可以快速的启动服务或构建应用、同时能够快速和云平台资源进行对接。 Spring Cloud Netflix，该项目是Spring Cloud的子项目之一，主要内容是对Netflix公司一系列开源产品的包装，它为Spring Boot应用提供了自配置的Netflix OSS整合。通过一些简单的注解，开发者就可以快速的在应用中配置一下常用模块并构建庞大的分布式系统。它主要提供的模块包括：服务发现（Eureka），断路器（Hystrix），智能路有（Zuul），客户端负载均衡（Ribbon）等。 当然Spring Cloud还有额外扩展的其它很多组件，包括了服务链路监控和跟踪（很关键的一个功能），消息总线，数据流处理，批量任务处理等。而对于整个Spring Cloud微服务框架简单来说，即是：你只要划分到你的微服务组件和模块，并定义好需要暴露的API接口，那么剩下的整个开发和传统方式没有太大的区别，你开发完成的组件集成起来就是一个分布式可扩展的微服务环境。里面设计到的接口发布，服务注册，服务调用和路由，服务监控，健康检测和流控等都会由微服务框架来帮你完成。 PS：正是有了成熟的微服务框架，我们才更应该将微服务架构设计重心从技术底层转移到组件划分和接口设计上。 Spring Cloud VS DubboR1：背景Dubbo：是阿里巴巴服务化治理的核心框架，并被广泛应用于阿里巴巴集团的各成员站点。 Spring Cloud：是Spring Source的产物，Spring社区的强大背书可以说是Java企业界最有影响力的组织了，除了Spring Source之外，还有Pivotal和Netfix是其强大的后盾与技术输出。其中Netflix开源的整套微服务架构套件是Spring Cloud的核心。 R2：社区活跃度我们选择一个开源框架，社区的活跃度是我们极为关注的一个要点。社区越活跃，解决问题的速度越快，框架也会越来越完善，不然当我们碰到问题，就不得不自己解决。而对于团队来说，也就意味着我们不得不自己去维护框架的源码，这对于团队来说也将会是一个很大的负担。 Dubbo ：https://github.com/dubbo Spring Cloud ：https://github.com/spring-cloud 小结：在社区活跃度上，Spring Cloud毋庸置疑的优于Dubbo，这对于没有大量精力与财力维护这部分开源内容的团队来说，Spring Cloud会是更优的选择。 R3：架构完整度根据微服务架构在各方面的要素，看看Spring Cloud和Dubbo都提供了哪些支持： Dubbo Spring Cloud 服务注册中心 Zookeeper Spring Cloud Netflix Eureka 服务调用方式 RPC REST API 服务网关 无 Spring Cloud Netflix Zuul 断路器 不完善 Spring Cloud Netflix Hystrix 分布式配置 无 Spring Cloud Config 服务跟踪 无 Spring Cloud Sleuth 消息总线 无 Spring Cloud Bus 数据流 无 Spring Cloud Stream 批量任务 无 Spring Cloud Task …… …… …… Dubbo对于上表中总结为“无”的组件不代表不能实现，而只是Dubbo框架自身不提供，需要另外整合以实现对应的功能，比如： 分布式配置：可以使用淘宝的diamond、百度的disconf来实现分布式配置管理。但是Spring Cloud中的Config组件除了提供配置管理之外，由于其存储可以使用git，因此它天然的实现了配置内容的版本管理，可以完美的与应用版本管理整合起来。服务跟踪：可以使用京东开源的Hydra批量任务：可以使用当当开源的Elastic-Job…… R4：对比总结通过上面几个环节上的分析，打个不恰当的比喻：使用Dubbo构建的微服务架构就像组装电脑，各环节我们的选择自由度很高，但是最终结果很有可能因为一条内存质量不行就点不亮了，总是让人不怎么放心，但是如果你是一名高手，那这些都不是问题；而Spring Cloud就像品牌机，在Spring Source的整合下，做了大量的兼容性测试，保证了机器拥有更高的稳定性，但是如果要在使用非原装组件外的东西，就需要对其基础有足够的了解。 PS：本人博客新人，不喜勿喷，谢谢!! 参考文章：http://blog.sina.com.cn/s/blog_493a84550102wkna.htmlhttp://blog.sina.com.cn/s/blog_493a84550102wkp2.htmlhttp://blog.didispace.com/microservice-framework/]]></content>
      <categories>
        <category>SpringCloud笔记</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>微服务框架</tag>
      </tags>
  </entry>
</search>
